MainWindow.xaml:
<Window x:Class="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"
        mc:Ignorable="d"
        Title="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –í—Ö–æ–¥" 
        Height="450" Width="800"
        WindowStartupLocation="CenterScreen"
        ResizeMode="NoResize">
    <Grid Background="#FFE6E6E6">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º -->
        <StackPanel Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center">
            <Image Source="C:\Users\User\Downloads\Downloads\Common\logo.png" Width="259" Height="247" Margin="0,0,0,20"/>
            <TextBlock Text="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" 
                       FontSize="18" FontWeight="Bold" 
                       HorizontalAlignment="Center"/>
        </StackPanel>

        <!-- –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å —Ñ–æ—Ä–º–æ–π –≤—Ö–æ–¥–∞ -->
        <Border Grid.Column="1" Background="White" Margin="20,10,20,10" CornerRadius="10">
            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Width="300">
                <TextBlock Text="–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É" FontSize="20" FontWeight="Bold" 
                           HorizontalAlignment="Center" Margin="0,0,0,20"/>

                <TextBlock Text="–õ–æ–≥–∏–Ω:" Margin="10,0,10,5"/>
                <TextBox x:Name="LoginTextBox" Margin="10,0,10,10" Height="30"/>

                <TextBlock Text="–ü–∞—Ä–æ–ª—å:" Margin="10,0,10,5"/>
                <Grid Margin="10,0,10,10" Height="30" x:Name="PasswordContainer">
                    <PasswordBox x:Name="PasswordBox" PasswordChar="*"/>
                    <TextBox x:Name="PasswordTextBox" Visibility="Collapsed"/>
                    <ToggleButton x:Name="ShowPasswordToggle" Content="üëÅ" 
                  HorizontalAlignment="Right" Width="30"
                  Click="ShowPasswordToggle_Click"/>
                </Grid>

                <!-- CAPTCHA –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                <StackPanel x:Name="CaptchaPanel" Visibility="Visible" Margin="10">
                    <TextBlock Text="–í–≤–µ–¥–∏—Ç–µ CAPTCHA:" Margin="0,0,0,5"/>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0" BorderBrush="Gray" BorderThickness="1" 
                Margin="0,0,5,0" x:Name="CaptchaContainer">
                            <!-- CAPTCHA –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å -->
                        </Border>
                        <Button Grid.Column="1" Content="‚ü≥" Width="30" 
                Click="RefreshCaptcha_Click" ToolTip="–û–±–Ω–æ–≤–∏—Ç—å CAPTCHA"/>
                    </Grid>
                    <TextBox x:Name="CaptchaTextBox" Margin="0,5,0,0" Height="30"/>
                </StackPanel>

                <Button Content="–í–æ–π—Ç–∏" Margin="10,20,10,10" Height="40" 
                        Click="LoginButton_Click" FontWeight="Bold"/>

                <TextBlock x:Name="ErrorMessage" Foreground="Red" Margin="10" 
                           TextWrapping="Wrap" HorizontalAlignment="Center"/>
            </StackPanel>
        </Border>
    </Grid>
</Window>

</Window>

MainWindow.xaml.cs:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Threading;
using –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models;
using –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.ViewModels;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
{
    /// <summary>
    /// –õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private Captcha _captcha;
        public MainWindow()
        {
            InitializeComponent();
            _captcha = new Captcha();
            ShowCaptcha(); // CAPTCHA –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        }
        private void ShowPasswordToggle_Click(object sender, RoutedEventArgs e)
        {
            if (ShowPasswordToggle.IsChecked == true)
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º TextBox, —Å–∫—Ä—ã–≤–∞–µ–º PasswordBox
                PasswordTextBox.Text = PasswordBox.Password;
                PasswordTextBox.Visibility = Visibility.Visible;
                PasswordBox.Visibility = Visibility.Collapsed;
            }
            else
            {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º PasswordBox, —Å–∫—Ä—ã–≤–∞–µ–º TextBox
                PasswordBox.Password = PasswordTextBox.Text;
                PasswordBox.Visibility = Visibility.Visible;
                PasswordTextBox.Visibility = Visibility.Collapsed;
            }
        }

        private void ShowCaptcha()
        {
            CaptchaPanel.Visibility = Visibility.Visible;
            UpdateCaptchaImage();
        }

        private void UpdateCaptchaImage()
        {
            CaptchaContainer.Child = _captcha.GenerateCanvas();
        }

        private void LoginButton_Click(object sender, RoutedEventArgs e)
        {
            var login = LoginTextBox.Text;
            var password = PasswordBox.Password; // –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PasswordBox

            Console.WriteLine($"Trying auth: {login}"); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ



            var user = DatabaseHelper.AuthenticateUser(login, password);
            if (user != null)
            {
                // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            }
            else
            {
                MessageBox.Show("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.");
            }
        }

        private void RefreshCaptcha_Click(object sender, RoutedEventArgs e)
        {
            _captcha.GenerateNew();
            UpdateCaptchaImage();
        }

        private void OpenUserWindow(User user)
        {
            Window userWindow = null;

            switch (user.Role)
            {
                case "Patient":
                    userWindow = new PatientWindow(user);
                    break;
                case "LabWorker":
                    userWindow = new LabWorkerWindow(user);
                    break;
                case "Accountant":
                    userWindow = new AccountantWindow(user);
                    break;
                case "Admin":
                    userWindow = new AdminWindow(user);
                    break;
            }

            if (userWindow != null)
            {
                userWindow.Show();
                this.Close();
            }
        }
    }
}


AdminWindow.xaml:
<Window x:Class="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.AdminWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"
        mc:Ignorable="d"
        Title="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" Height="600" Width="900"
        WindowStartupLocation="CenterScreen">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- –®–∞–ø–∫–∞ -->
        <Border Grid.Row="0" Background="#FF0078D7" Padding="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Image Source="C:\Users\User\Downloads\Downloads\Session 1\–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.png" Width="40" Height="40"/>

                <StackPanel Grid.Column="1" Margin="10,0">
                    <TextBlock Text="{Binding UserFullName}" FontSize="16" FontWeight="Bold" Foreground="White"/>
                    <TextBlock Text="{Binding UserRole}" Foreground="White"/>
                </StackPanel>

                <Button Grid.Column="2" Content="–í—ã–π—Ç–∏" Padding="10,5" 
                        Click="LogoutButton_Click" Background="Transparent" 
                        Foreground="White" BorderBrush="White"/>
            </Grid>
        </Border>

        <!-- –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ -->
        <TabControl Grid.Row="1">
            <TabItem Header="–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–∞">
                <DataGrid x:Name="LoginHistoryGrid" AutoGenerateColumns="False" IsReadOnly="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è" Binding="{Binding –î–∞—Ç–∞–í—Ä–µ–º—è–ü–æ–ø—ã—Ç–∫–∏}" Width="150"/>
                        <DataGridTextColumn Header="–õ–æ–≥–∏–Ω" Binding="{Binding –õ–æ–≥–∏–Ω–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}" Width="120"/>
                        <DataGridTextColumn Header="–†–æ–ª—å" Binding="{Binding –†–æ–ª—å}" Width="100"/>
                        <DataGridTextColumn Header="–†–µ–∑—É–ª—å—Ç–∞—Ç" Binding="{Binding –†–µ–∑—É–ª—å—Ç–∞—Ç}" Width="100"/>
                        <DataGridTextColumn Header="IP –∞–¥—Ä–µ—Å" Binding="{Binding IP–ê–¥—Ä–µ—Å}" Width="120"/>
                    </DataGrid.Columns>
                </DataGrid>
            </TabItem>
            <TabItem Header="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏">
                <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ -->
            </TabItem>
            <TabItem Header="–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã">
                <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ -->
            </TabItem>
        </TabControl>
    </Grid>
</Window>

AdminWindow.xaml.cs:
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
{
    /// <summary>
    /// –õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è AdminWindow.xaml
    /// </summary>
    public partial class AdminWindow : Window
    {
        public AdminWindow(User user)
        {
            InitializeComponent();
            DataContext = new AdminViewModel(user);
            LoadLoginHistory();
        }
        private void LoadLoginHistory()
        {
            string query = "SELECT * FROM –ò—Å—Ç–æ—Ä–∏—è–í—Ö–æ–¥–∞–ü–æ–¥—Ä–æ–±–Ω–æ ORDER BY –î–∞—Ç–∞–í—Ä–µ–º—è–ü–æ–ø—ã—Ç–∫–∏ DESC";

            using (SqlConnection connection = DatabaseHelper.GetConnection())
            {
                SqlCommand command = new SqlCommand(query, connection);
                SqlDataAdapter adapter = new SqlDataAdapter(command);
                DataTable table = new DataTable();

                try
                {
                    connection.Open();
                    adapter.Fill(table);
                    LoginHistoryGrid.ItemsSource = table.DefaultView;
                }
                catch (SqlException ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤—Ö–æ–¥–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void LogoutButton_Click(object sender, RoutedEventArgs e)
        {
            var mainWindow = new MainWindow();
            mainWindow.Show();
            this.Close();
        }
    }
}
AccountantWindow.xaml:
<Window x:Class="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.AccountantWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"
        mc:Ignorable="d"
        Title="–ë—É—Ö–≥–∞–ª—Ç–µ—Ä" Height="600" Width="900"
        WindowStartupLocation="CenterScreen">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- –®–∞–ø–∫–∞ -->
        <Border Grid.Row="0" Background="#FF9C27B0" Padding="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Image Source="C:\Users\User\Downloads\Downloads\Session 1\–ë—É—Ö–≥–∞–ª—Ç–µ—Ä.jpeg" Width="40" Height="40"/>

                <StackPanel Grid.Column="1" Margin="10,0">
                    <TextBlock Text="{Binding UserFullName}" FontSize="16" FontWeight="Bold" Foreground="White"/>
                    <TextBlock Text="–ë—É—Ö–≥–∞–ª—Ç–µ—Ä" Foreground="White"/>
                </StackPanel>

                <Button Grid.Column="2" Content="–í—ã–π—Ç–∏" Padding="10,5" 
                        Click="LogoutButton_Click" Background="Transparent" 
                        Foreground="White" BorderBrush="White"/>
            </Grid>
        </Border>

        <!-- –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ -->
        <TabControl Grid.Row="1">
            <TabItem Header="–û—Ç—á–µ—Ç—ã">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="5">
                        <DatePicker x:Name="StartDatePicker" Margin="5" Width="120"/>
                        <DatePicker x:Name="EndDatePicker" Margin="5" Width="120"/>
                        <Button Content="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç" Margin="5" Padding="10,5" Click="GenerateReport_Click"/>
                        <Button Content="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel" Margin="5" Padding="10,5" Click="ExportToExcel_Click"/>
                    </StackPanel>

                    <DataGrid x:Name="ReportGrid" Grid.Row="1" AutoGenerateColumns="False" IsReadOnly="True">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="–î–∞—Ç–∞" Binding="{Binding –î–∞—Ç–∞}" Width="100"/>
                            <DataGridTextColumn Header="–£—Å–ª—É–≥–∞" Binding="{Binding –£—Å–ª—É–≥–∞}" Width="200"/>
                            <DataGridTextColumn Header="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" Binding="{Binding –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ}" Width="100"/>
                            <DataGridTextColumn Header="–°—É–º–º–∞" Binding="{Binding –°—É–º–º–∞, StringFormat={}{0:C}}" Width="120"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="–°—á–µ—Ç–∞ —Å—Ç—Ä–∞—Ö–æ–≤—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º">
                <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞–º–∏ -->
            </TabItem>
        </TabControl>
    </Grid>
</Window>

AccountantWindow.xaml.cs:
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models;
using –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.ViewModels;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
{
    /// <summary>
    /// –õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è AccountantWindow.xaml
    /// </summary>
    public partial class AccountantWindow : Window
    {
        private readonly User _currentUser;
        public AccountantWindow(User user)
        {
            InitializeComponent();
            _currentUser = user;
            DataContext = new AccountantViewModel(user);

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            StartDatePicker.SelectedDate = DateTime.Today.AddMonths(-1);
            EndDatePicker.SelectedDate = DateTime.Today;
        }
        private void GenerateReport_Click(object sender, RoutedEventArgs e)
        {
            if (StartDatePicker.SelectedDate == null || EndDatePicker.SelectedDate == null)
            {
                MessageBox.Show("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            string query = @"
                SELECT 
                    CONVERT(DATE, –æ—É.–î–∞—Ç–∞–í—Ä–µ–º—è–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è) AS –î–∞—Ç–∞,
                    —É.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ AS –£—Å–ª—É–≥–∞,
                    COUNT(*) AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ,
                    SUM(—É.–°—Ç–æ–∏–º–æ—Å—Ç—å) AS –°—É–º–º–∞
                FROM –û–∫–∞–∑–∞–Ω–Ω—ã–µ–£—Å–ª—É–≥–∏ –æ—É
                JOIN –ó–∞–∫–∞–∑—ã–£—Å–ª—É–≥–∏ –∑—É ON –æ—É.ID_–∑–∞–∫–∞–∑–∞_—É—Å–ª—É–≥–∏ = –∑—É.ID_–∑–∞–∫–∞–∑–∞_—É—Å–ª—É–≥–∏
                JOIN –£—Å–ª—É–≥–∏ —É ON –∑—É.ID_—É—Å–ª—É–≥–∏ = —É.ID_—É—Å–ª—É–≥–∏
                WHERE –æ—É.–î–∞—Ç–∞–í—Ä–µ–º—è–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è BETWEEN @StartDate AND @EndDate
                GROUP BY CONVERT(DATE, –æ—É.–î–∞—Ç–∞–í—Ä–µ–º—è–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è), —É.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
                ORDER BY CONVERT(DATE, –æ—É.–î–∞—Ç–∞–í—Ä–µ–º—è–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è) DESC, —É.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ";

            using (SqlConnection connection = DatabaseHelper.GetConnection())
            {
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@StartDate", StartDatePicker.SelectedDate.Value);
                command.Parameters.AddWithValue("@EndDate", EndDatePicker.SelectedDate.Value.AddDays(1));

                SqlDataAdapter adapter = new SqlDataAdapter(command);
                DataTable table = new DataTable();

                try
                {
                    connection.Open();
                    adapter.Fill(table);
                    ReportGrid.ItemsSource = table.DefaultView;
                }
                catch (SqlException ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void ExportToExcel_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void LogoutButton_Click(object sender, RoutedEventArgs e)
        {
            var mainWindow = new MainWindow();
            mainWindow.Show();
            this.Close();
        }
    }
}
LabWorkerWindow.xaml:
<Window x:Class="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.ViewModels.LabWorkerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.ViewModels"
        mc:Ignorable="d"
        Title="–õ–∞–±–æ—Ä–∞–Ω—Ç" Height="600" Width="900"
        WindowStartupLocation="CenterScreen">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- –®–∞–ø–∫–∞ -->
        <Border Grid.Row="0" Background="#FF2196F3" Padding="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Image Source="C:\Users\User\Downloads\Downloads\Session 1\laborant_1.jpeg" Width="40" Height="40"/>

                <StackPanel Grid.Column="1" Margin="10,0">
                    <TextBlock Text="{Binding UserFullName}" FontSize="16" FontWeight="Bold" Foreground="White"/>
                    <TextBlock Text="–õ–∞–±–æ—Ä–∞–Ω—Ç" Foreground="White"/>
                </StackPanel>

                <Button Grid.Column="2" Content="–í—ã–π—Ç–∏" Padding="10,5" 
                        Click="LogoutButton_Click" Background="Transparent" 
                        Foreground="White" BorderBrush="White"/>
            </Grid>
        </Border>

        <!-- –¢–∞–π–º–µ—Ä —Å–µ–∞–Ω—Å–∞ -->
        <Border Grid.Row="1" Background="#FFBBDEFB" Padding="5">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                <TextBlock Text="–í—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞: " FontWeight="Bold" Margin="0,0,5,0"/>
                <TextBlock x:Name="SessionTimerText" Text="02:30" FontWeight="Bold"/>
                <TextBlock x:Name="SessionWarningText" Text="" Foreground="Red" Margin="10,0,0,0" FontWeight="Bold"/>
            </StackPanel>
        </Border>

        <!-- –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ -->
        <TabControl Grid.Row="2">
            <TabItem Header="–ü—Ä–∏–µ–º –±–∏–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="5">
                        <Button Content="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑" Margin="5" Padding="10,5" Click="CreateNewOrder_Click"/>
                        <Button Content="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫" Margin="5" Padding="10,5" Click="RefreshOrders_Click"/>
                    </StackPanel>

                    <DataGrid x:Name="OrdersGrid" Grid.Row="1" AutoGenerateColumns="False" IsReadOnly="True">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞" Binding="{Binding ID_–∑–∞–∫–∞–∑–∞}" Width="100"/>
                            <DataGridTextColumn Header="–ü–∞—Ü–∏–µ–Ω—Ç" Binding="{Binding –ü–∞—Ü–∏–µ–Ω—Ç}" Width="200"/>
                            <DataGridTextColumn Header="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è" Binding="{Binding –î–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è}" Width="150"/>
                            <DataGridTextColumn Header="–°—Ç–∞—Ç—É—Å" Binding="{Binding –°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞}" Width="120"/>
                            <DataGridTemplateColumn Header="–î–µ–π—Å—Ç–≤–∏—è" Width="120">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button Content="–ü—Ä–æ—Å–º–æ—Ç—Ä" Padding="5,2" Click="ViewOrder_Click"/>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                        </DataGrid.Columns>
                    </DataGrid>
                </Grid>
            </TabItem>
            <TabItem Header="–†–∞–±–æ—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º">
                <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º -->
            </TabItem>
            <TabItem Header="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤">
                <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ -->
            </TabItem>
        </TabControl>
    </Grid>
</Window>

LabWorkerWindow.xaml.cs:
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Threading;
using –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.ViewModels
{
    /// <summary>
    /// –õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è LabWorkerWindow.xaml
    /// </summary>
    public partial class LabWorkerWindow : Window
    {
        private readonly User _currentUser;
        private DispatcherTimer _sessionTimer;
        private TimeSpan _sessionTimeLeft;
        private const int SessionDurationMinutes = 10;
        public LabWorkerWindow(User user)
        {
            InitializeComponent();
            _currentUser = user;
            DataContext = new LabWorkerViewModel(user);
            LoadOrders();
            InitializeSessionTimer();
        }
        private void InitializeSessionTimer()
        {
            _sessionTimeLeft = TimeSpan.FromMinutes(SessionDurationMinutes);
            SessionTimerText.Text = _sessionTimeLeft.ToString(@"mm\:ss");

            _sessionTimer = new DispatcherTimer();
            _sessionTimer.Interval = TimeSpan.FromSeconds(1);
            _sessionTimer.Tick += SessionTimer_Tick;
            _sessionTimer.Start();
        }

        private void SessionTimer_Tick(object sender, EventArgs e)
        {
            _sessionTimeLeft = _sessionTimeLeft.Subtract(TimeSpan.FromSeconds(1));
            SessionTimerText.Text = _sessionTimeLeft.ToString(@"mm\:ss");

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∫–æ–Ω—Ü–∞ (–¥–ª—è —Ç–µ—Å—Ç–∞ - –∑–∞ 1 –º–∏–Ω—É—Ç—É)
            if (_sessionTimeLeft <= TimeSpan.FromMinutes(1))
            {
                SessionWarningText.Text = "–î–æ –∫–æ–Ω—Ü–∞ —Å–µ–∞–Ω—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã!";
            }

            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
            if (_sessionTimeLeft <= TimeSpan.Zero)
            {
                _sessionTimer.Stop();
                MessageBox.Show("–í—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞ –∏—Å—Ç–µ–∫–ª–æ. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 1 –º–∏–Ω—É—Ç—É.", "–í–Ω–∏–º–∞–Ω–∏–µ", MessageBoxButton.OK, MessageBoxImage.Warning);
                BlockSystem();
            }
        }

        private void BlockSystem()
        {
            // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ 1 –º–∏–Ω—É—Ç—É (–¥–ª—è —Ç–µ—Å—Ç–∞)
            var timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromMinutes(1);
            timer.Tick += (s, e) => { timer.Stop(); };
            timer.Start();

            // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
            var mainWindow = new MainWindow();
            mainWindow.Show();
            this.Close();
        }

        private void LoadOrders()
        {
            string query = @"
                SELECT –∑.ID_–∑–∞–∫–∞–∑–∞, –ø.–§–ò–û AS –ü–∞—Ü–∏–µ–Ω—Ç, –∑.–î–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è, –∑.–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞
                FROM –ó–∞–∫–∞–∑—ã –∑
                JOIN –ü–∞—Ü–∏–µ–Ω—Ç—ã –ø ON –∑.ID_–ø–∞—Ü–∏–µ–Ω—Ç–∞ = –ø.ID_–ø–∞—Ü–∏–µ–Ω—Ç–∞
                WHERE –∑.–ê—Ä—Ö–∏–≤–Ω—ã–π = 0 AND –∑.–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞ = '–°–æ–∑–¥–∞–Ω'
                ORDER BY –∑.–î–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è DESC";

            using (SqlConnection connection = DatabaseHelper.GetConnection())
            {
                SqlCommand command = new SqlCommand(query, connection);
                SqlDataAdapter adapter = new SqlDataAdapter(command);
                DataTable table = new DataTable();

                try
                {
                    connection.Open();
                    adapter.Fill(table);
                    OrdersGrid.ItemsSource = table.DefaultView;
                }
                catch (SqlException ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void CreateNewOrder_Click(object sender, RoutedEventArgs e)
        {
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            MessageBox.Show("–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void RefreshOrders_Click(object sender, RoutedEventArgs e)
        {
            LoadOrders();
        }

        private void ViewOrder_Click(object sender, RoutedEventArgs e)
        {
            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞
            MessageBox.Show("–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void LogoutButton_Click(object sender, RoutedEventArgs e)
        {
            _sessionTimer.Stop();
            var mainWindow = new MainWindow();
            mainWindow.Show();
            this.Close();
        }
    }
}
PatientWindow.xaml:
<Window x:Class="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.PatientWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"
        mc:Ignorable="d"
        Title="–ü–∞—Ü–∏–µ–Ω—Ç" Height="600" Width="900"
        WindowStartupLocation="CenterScreen">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- –®–∞–ø–∫–∞ -->
        <Border Grid.Row="0" Background="#FF4CAF50" Padding="10">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Image Source="C:\Users\User\Downloads\Downloads\Session 1\–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.png" Width="40" Height="40"/>

                <StackPanel Grid.Column="1" Margin="10,0">
                    <TextBlock Text="{Binding UserFullName}" FontSize="16" FontWeight="Bold" Foreground="White"/>
                    <TextBlock Text="–ü–∞—Ü–∏–µ–Ω—Ç" Foreground="White"/>
                </StackPanel>

                <Button Grid.Column="2" Content="–í—ã–π—Ç–∏" Padding="10,5" 
                        Click="LogoutButton_Click" Background="Transparent" 
                        Foreground="White" BorderBrush="White"/>
            </Grid>
        </Border>

        <!-- –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ -->
        <TabControl Grid.Row="1">
            <TabItem Header="–ú–æ–∏ –∑–∞–∫–∞–∑—ã">
                <DataGrid x:Name="OrdersGrid" AutoGenerateColumns="False" IsReadOnly="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞" Binding="{Binding ID_–∑–∞–∫–∞–∑–∞}" Width="100"/>
                        <DataGridTextColumn Header="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è" Binding="{Binding –î–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è}" Width="150"/>
                        <DataGridTextColumn Header="–°—Ç–∞—Ç—É—Å" Binding="{Binding –°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞}" Width="120"/>
                        <DataGridTextColumn Header="–ö–æ–ª-–≤–æ —É—Å–ª—É–≥" Binding="{Binding –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–£—Å–ª—É–≥}" Width="100"/>
                        <DataGridTextColumn Header="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å" Binding="{Binding –û–±—â–∞—è–°—Ç–æ–∏–º–æ—Å—Ç—å, StringFormat={}{0:C}}" Width="120"/>
                    </DataGrid.Columns>
                </DataGrid>
            </TabItem>
            <TabItem Header="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤">
                <!-- –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤ -->
                <DataGrid x:Name="ResultsGrid" AutoGenerateColumns="False" IsReadOnly="True">
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="–£—Å–ª—É–≥–∞" Binding="{Binding –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ}" Width="200"/>
                        <DataGridTextColumn Header="–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" Binding="{Binding –î–∞—Ç–∞–í—Ä–µ–º—è–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è}" Width="150"/>
                        <DataGridTextColumn Header="–†–µ–∑—É–ª—å—Ç–∞—Ç" Binding="{Binding –†–µ–∑—É–ª—å—Ç–∞—Ç}" Width="*"/>
                    </DataGrid.Columns>
                </DataGrid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>

PatientWindow.xaml.cs:
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è
{
    /// <summary>
    /// –õ–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è PatientWindow.xaml
    /// </summary>
    public partial class PatientWindow : Window
    {
        private readonly User _currentUser;
        public PatientWindow(User user)
        {
            InitializeComponent();
            _currentUser = user;
            DataContext = new PatientViewModel(user);
            LoadPatientData();
        }
        private void LoadPatientData()
        {
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞
            string ordersQuery = @"
                SELECT –∑.ID_–∑–∞–∫–∞–∑–∞, –∑.–î–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è, –∑.–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞, 
                       COUNT(–∑—É.ID_—É—Å–ª—É–≥–∏) AS –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ–£—Å–ª—É–≥,
                       SUM(—É.–°—Ç–æ–∏–º–æ—Å—Ç—å) AS –û–±—â–∞—è–°—Ç–æ–∏–º–æ—Å—Ç—å
                FROM –ó–∞–∫–∞–∑—ã –∑
                JOIN –ó–∞–∫–∞–∑—ã–£—Å–ª—É–≥–∏ –∑—É ON –∑.ID_–∑–∞–∫–∞–∑–∞ = –∑—É.ID_–∑–∞–∫–∞–∑–∞
                JOIN –£—Å–ª—É–≥–∏ —É ON –∑—É.ID_—É—Å–ª—É–≥–∏ = —É.ID_—É—Å–ª—É–≥–∏
                WHERE –∑.ID_–ø–∞—Ü–∏–µ–Ω—Ç–∞ = @PatientId AND –∑.–ê—Ä—Ö–∏–≤–Ω—ã–π = 0
                GROUP BY –∑.ID_–∑–∞–∫–∞–∑–∞, –∑.–î–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è, –∑.–°—Ç–∞—Ç—É—Å–ó–∞–∫–∞–∑–∞
                ORDER BY –∑.–î–∞—Ç–∞–°–æ–∑–¥–∞–Ω–∏—è DESC";

            using (SqlConnection connection = DatabaseHelper.GetConnection())
            {
                SqlCommand command = new SqlCommand(ordersQuery, connection);
                command.Parameters.AddWithValue("@PatientId", _currentUser.Id);

                SqlDataAdapter adapter = new SqlDataAdapter(command);
                DataTable ordersTable = new DataTable();

                try
                {
                    connection.Open();
                    adapter.Fill(ordersTable);
                    OrdersGrid.ItemsSource = ordersTable.DefaultView;
                }
                catch (SqlException ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–æ–≤
            string resultsQuery = @"
                SELECT —É.–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –æ—É.–î–∞—Ç–∞–í—Ä–µ–º—è–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –æ—É.–†–µ–∑—É–ª—å—Ç–∞—Ç
                FROM –û–∫–∞–∑–∞–Ω–Ω—ã–µ–£—Å–ª—É–≥–∏ –æ—É
                JOIN –ó–∞–∫–∞–∑—ã–£—Å–ª—É–≥–∏ –∑—É ON –æ—É.ID_–∑–∞–∫–∞–∑–∞_—É—Å–ª—É–≥–∏ = –∑—É.ID_–∑–∞–∫–∞–∑–∞_—É—Å–ª—É–≥–∏
                JOIN –£—Å–ª—É–≥–∏ —É ON –∑—É.ID_—É—Å–ª—É–≥–∏ = —É.ID_—É—Å–ª—É–≥–∏
                JOIN –ó–∞–∫–∞–∑—ã –∑ ON –∑—É.ID_–∑–∞–∫–∞–∑–∞ = –∑.ID_–∑–∞–∫–∞–∑–∞
                WHERE –∑.ID_–ø–∞—Ü–∏–µ–Ω—Ç–∞ = @PatientId
                ORDER BY –æ—É.–î–∞—Ç–∞–í—Ä–µ–º—è–í—ã–ø–æ–ª–Ω–µ–Ω–∏—è DESC";

            using (SqlConnection connection = DatabaseHelper.GetConnection())
            {
                SqlCommand command = new SqlCommand(resultsQuery, connection);
                command.Parameters.AddWithValue("@PatientId", _currentUser.Id);

                SqlDataAdapter adapter = new SqlDataAdapter(command);
                DataTable resultsTable = new DataTable();

                try
                {
                    connection.Open();
                    adapter.Fill(resultsTable);
                    ResultsGrid.ItemsSource = resultsTable.DefaultView;
                }
                catch (SqlException ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {ex.Message}", "–û—à–∏–±–∫–∞", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void LogoutButton_Click(object sender, RoutedEventArgs e)
        {
            var mainWindow = new MainWindow();
            mainWindow.Show();
            this.Close();
        }
    }
}

–¢–∞–∫–∂–µ –≤ —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ –µ—Å—Ç—å –¥–≤–µ –ø–∞–ø–∫–∏: Models –∏ ViewModels
Models:
Captcha.cs:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Shapes;
using System.Windows;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models
{
    public class Captcha
    {
        private string _text;
        private readonly Random _random = new Random();

        public string Text => _text;

        public Captcha()
        {
            GenerateNew();
        }

        public void GenerateNew()
        {
            const string chars = "ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789";
            char[] captchaText = new char[4];

            for (int i = 0; i < 4; i++)
            {
                captchaText[i] = chars[_random.Next(chars.Length)];
            }

            _text = new string(captchaText);
        }

        public Canvas GenerateCanvas()
        {
            var canvas = new Canvas
            {
                Width = 150,
                Height = 50,
                Background = Brushes.White
            };

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            for (int i = 0; i < _text.Length; i++)
            {
                var textBlock = new TextBlock
                {
                    Text = _text[i].ToString(),
                    FontSize = _random.Next(18, 24),
                    FontWeight = FontWeights.Bold,
                    Foreground = Brushes.Black,
                    RenderTransform = new RotateTransform(_random.Next(-15, 15))
                };

                Canvas.SetLeft(textBlock, 10 + i * 30 + _random.Next(-5, 5));
                Canvas.SetTop(textBlock, 10 + _random.Next(-5, 5));
                canvas.Children.Add(textBlock);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —à—É–º - –ª–∏–Ω–∏–∏
            for (int i = 0; i < 3; i++)
            {
                var line = new Line
                {
                    X1 = _random.Next(0, 50),
                    Y1 = _random.Next(0, 50),
                    X2 = _random.Next(100, 150),
                    Y2 = _random.Next(0, 50),
                    Stroke = Brushes.Gray,
                    StrokeThickness = 1
                };
                canvas.Children.Add(line);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —à—É–º - —Ç–æ—á–∫–∏
            for (int i = 0; i < 20; i++)
            {
                var ellipse = new Ellipse
                {
                    Width = _random.Next(1, 3),
                    Height = _random.Next(1, 3),
                    Fill = Brushes.Gray
                };

                Canvas.SetLeft(ellipse, _random.Next(0, 150));
                Canvas.SetTop(ellipse, _random.Next(0, 50));
                canvas.Children.Add(ellipse);
            }

            return canvas;
        }
    }
}
DatabaseHelper.cs:
using System;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Security.Cryptography;
using System.Text;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models
{
    public static class DatabaseHelper
    {
        private static string connectionString = ConfigurationManager.ConnectionStrings["LaboratoryDB"].ConnectionString;

        public static SqlConnection GetConnection()
        {
            return new SqlConnection(connectionString);
        }

        public static User AuthenticateUser(string login, string password)
        {
            User user = null;
            Console.WriteLine($"Auth attempt: {login}");

            try
            {
                string query = @"
            SELECT 'Patient' AS Role, ID_–ø–∞—Ü–∏–µ–Ω—Ç–∞ AS Id, –§–ò–û AS FullName, NULL AS LastLogin 
            FROM –ü–∞—Ü–∏–µ–Ω—Ç—ã WHERE –õ–æ–≥–∏–Ω = @Login AND –ü–∞—Ä–æ–ª—å = @Password AND –ê—Ä—Ö–∏–≤–Ω—ã–π = 0
            UNION
            SELECT 'LabWorker' AS Role, ID_–ª–∞–±–æ—Ä–∞–Ω—Ç–∞ AS Id, –§–ò–û AS FullName, –ü–æ—Å–ª–µ–¥–Ω—è—è–î–∞—Ç–∞–í—Ö–æ–¥–∞ AS LastLogin 
            FROM –õ–∞–±–æ—Ä–∞–Ω—Ç—ã WHERE –õ–æ–≥–∏–Ω = @Login AND –ü–∞—Ä–æ–ª—å = @Password AND –ê—Ä—Ö–∏–≤–Ω—ã–π = 0
            UNION
            SELECT 'Accountant' AS Role, ID_–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ AS Id, –§–ò–û AS FullName, –ü–æ—Å–ª–µ–¥–Ω—è—è–î–∞—Ç–∞–í—Ö–æ–¥–∞ AS LastLogin 
            FROM –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ã WHERE –õ–æ–≥–∏–Ω = @Login AND –ü–∞—Ä–æ–ª—å = @Password AND –ê—Ä—Ö–∏–≤–Ω—ã–π = 0
            UNION
            SELECT 'Admin' AS Role, ID_–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ AS Id, –õ–æ–≥–∏–Ω AS FullName, –ü–æ—Å–ª–µ–¥–Ω—è—è–î–∞—Ç–∞–í—Ö–æ–¥–∞ AS LastLogin 
            FROM –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã WHERE –õ–æ–≥–∏–Ω = @Login AND –ü–∞—Ä–æ–ª—å = @Password AND –ê—Ä—Ö–∏–≤–Ω—ã–π = 0";

                using (var connection = GetConnection())
                {
                    var cmd = new SqlCommand(query, connection);
                    cmd.Parameters.AddWithValue("@Login", login);
                    cmd.Parameters.AddWithValue("@Password", password);

                    connection.Open();
                    var reader = cmd.ExecuteReader();

                    if (reader.Read())
                    {
                        user = new User
                        {
                            Role = reader["Role"].ToString(),
                            Id = Convert.ToInt32(reader["Id"]),
                            FullName = reader["FullName"].ToString(),
                            LastLogin = reader["LastLogin"] != DBNull.Value
                                ? Convert.ToDateTime(reader["LastLogin"])
                                : (DateTime?)null
                        };

                        Console.WriteLine($"User found: {user.Role}");
                        UpdateLastLogin(user.Role, user.Id);
                        LogLoginAttempt(login, true);
                    }
                    else
                    {
                        Console.WriteLine("No user found");
                        LogLoginAttempt(login, false);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Auth error: {ex.Message}");
            }

            return user;
        }

        private static void UpdateLastLogin(string role, int id)
        {
            string tableName = "";
            string idColumn = "";

            switch (role)
            {
                case "Patient":
                    tableName = "–ü–∞—Ü–∏–µ–Ω—Ç—ã";
                    idColumn = "ID_–ø–∞—Ü–∏–µ–Ω—Ç–∞";
                    break;
                case "LabWorker":
                    tableName = "–õ–∞–±–æ—Ä–∞–Ω—Ç—ã";
                    idColumn = "ID_–ª–∞–±–æ—Ä–∞–Ω—Ç–∞";
                    break;
                case "Accountant":
                    tableName = "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ã";
                    idColumn = "ID_–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞";
                    break;
                case "Admin":
                    tableName = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã";
                    idColumn = "ID_–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞";
                    break;
            }

            string query = $"UPDATE {tableName} SET –ü–æ—Å–ª–µ–¥–Ω—è—è–î–∞—Ç–∞–í—Ö–æ–¥–∞ = GETDATE() WHERE {idColumn} = @Id";

            using (SqlConnection connection = GetConnection())
            {
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@Id", id);

                try
                {
                    connection.Open();
                    command.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }

        private static void LogLoginAttempt(string login, bool isSuccessful)
        {
            string query = "INSERT INTO –ò—Å—Ç–æ—Ä–∏—è–í—Ö–æ–¥–∞ (–õ–æ–≥–∏–Ω–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –£—Å–ø–µ—à–Ω–∞—è) VALUES (@Login, @IsSuccessful)";

            using (SqlConnection connection = GetConnection())
            {
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@Login", login);
                command.Parameters.AddWithValue("@IsSuccessful", isSuccessful);

                try
                {
                    connection.Open();
                    command.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }

        //public static string HashPassword(string password)
        //{
        //    using (SHA256 sha256 = SHA256.Create())
        //    {
        //        byte[] bytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
        //        StringBuilder builder = new StringBuilder();
        //        for (int i = 0; i < bytes.Length; i++)
        //        {
        //            builder.Append(bytes[i].ToString("x2"));
        //        }
        //        return builder.ToString();
        //    }
        //}
    }
}


User.cs:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models
{
    public class User
    {
        public string Role { get; set; } // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ Role
        public int Id { get; set; }
        public string FullName { get; set; }
        public DateTime? LastLogin { get; set; }
    }
}

–ø–∞–ø–∫–∞ ViewModels:
AccountantViewModel.cs:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.ViewModels
{
    public class AccountantViewModel : INotifyPropertyChanged
    {
        private readonly User _currentUser;

        public AccountantViewModel(User user)
        {
            _currentUser = user;
        }

        public string UserFullName => _currentUser.FullName;
        public string UserRole => "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä";

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
AdminViewModel.cs:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models
{

    public class AdminViewModel : INotifyPropertyChanged
    {
        private User _currentUser;
        public AdminViewModel(User user)
        {
            _currentUser = user;
        }

        public string UserFullName => _currentUser.FullName;
        public string UserRole => "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä";

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
LabWorkerViewModel.cs:
using System.ComponentModel;
using –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.ViewModels
{
    public class LabWorkerViewModel : INotifyPropertyChanged
    {
        private readonly User _currentUser;

        public LabWorkerViewModel(User user)
        {
            _currentUser = user;
        }

        public string UserFullName => _currentUser.FullName;
        public string UserRole => "–õ–∞–±–æ—Ä–∞–Ω—Ç";

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
PatientViewModel.cs:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è.Models
{
    public class PatientViewModel : INotifyPropertyChanged
    {
        private readonly User _currentUser;

        public PatientViewModel(User user)
        {
            _currentUser = user;
        }

        public string UserFullName => _currentUser.FullName;
        public string UserRole => "–ü–∞—Ü–∏–µ–Ω—Ç";

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
